name: export-and-branch-solution

on:
  pull_request:
    branches:
      - main

env:
  ENVIRONMENT_URL: secrets.DEV_ENV
  CLIENT_ID: secrets.CLIENT_ID
  TENANT_ID: secrets.TENANT_ID

permissions:
  contents: write
  pull-requests: write  # Allow PR updates

jobs:
  export-from-dev:
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1
    steps:
    - uses: actions/checkout@v3
      with:
        lfs: true

    - name: Install Power Platform CLI
      run: |
        Invoke-WebRequest -Uri https://aka.ms/powerplatform-vscode -OutFile powerplatform-vscode.msi
        Start-Process msiexec.exe -Wait -ArgumentList '/I powerplatform-vscode.msi /quiet /norestart'
        $env:Path += ";C:\Program Files\WindowsPowerShell\Modules"

    - name: Install PAC CLI
      uses: microsoft/powerplatform-actions/actions-install@v1
      id: install-pac

    - name: Who-Am-I
      uses: microsoft/powerplatform-actions/who-am-i@v1
      with:
        environment-url: ${{ secrets.DEV_ENV }}
        app-id: ${{ secrets.CLIENT_ID }}
        client-secret: ${{ secrets.Client_SPN }}
        tenant-id: ${{ secrets.TENANT_ID }}

    - name: Export Solution
      uses: microsoft/powerplatform-actions/export-solution@v1
      with:
        environment-url: ${{ secrets.DEV_ENV }}
        app-id: ${{ secrets.CLIENT_ID }}
        client-secret: ${{ secrets.Client_SPN }}
        tenant-id: ${{ secrets.TENANT_ID }}
        solution-name: gitsol
        solution-output-file: out/exported/gitsol.zip

    - name: Unpack Solution
      uses: microsoft/powerplatform-actions/unpack-solution@v1
      with:
        solution-file: out/exported/gitsol.zip
        solution-folder: out/solutions/gitsol
        solution-type: 'Unmanaged'
        overwrite-files: true

    - name: Branch Solution
      uses: microsoft/powerplatform-actions/branch-solution@v1
      with:
        solution-folder: out/solutions/gitsol
        solution-target-folder: solutions/gitsol
        repo-token: ${{ secrets.GH_TOKEN }}
        allow-empty-commit: true

  wait-for-approval:
    needs: [export-from-dev]
    runs-on: ubuntu-latest
    environment: production  # Triggers approval in GitHub UI
    steps:
      - name: Request Manual Approval
        run: echo "Waiting for approval from abcd@hotmail.com before merging..."
  
  merge-to-main:
    needs: [wait-for-approval]
    runs-on: ubuntu-latest
    if: github.actor == 'mainbilalg1@gmail.com'  # Ensure only this user can merge
    steps:
      - name: Merge Pull Request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            github.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              merge_method: "squash"
            })
