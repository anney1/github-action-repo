name: Automatically Call, Build, and Deploy Solution

on:
  workflow_call:
    inputs:
      solution_name:
        description: 'Name of the solution to deploy.'
        required: true
        type: string
      solution_version:
        description: 'Version of the solution to deploy.'
        required: true
        type: string
      BUILD_ENVIRONMENT_URL:
        description: 'Build environment URL.'
        required: true
        type: string
      PRODUCTION_ENVIRONMENT_URL:
        description: 'Production environment URL.'
        required: true
        type: string
    secrets:
      CLIENT_ID:
        description: 'The client ID.'
        required: true
      TENANT_ID:
        description: 'The tenant ID.'
        required: true
      envSecret:
        description: 'The secret value for authentication using SPN.'
        required: true
      GH_TOKEN:
        description: 'GitHub Personal Access Token.'
        required: true

jobs:
  Get-Solution-Name-and-Version:
    runs-on: ubuntu-latest
    outputs:
      solution_name: ${{ steps.get-solution-name.outputs.solution_name }}
      solution_version: ${{ steps.generate-version.outputs.solution_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: List repository contents
        run: ls -R

      - name: Check if Solution.xml exists
        run: |
          if [ -f "solutions/${{ inputs.solution_name }}/Other/Solution.xml" ]; then
            echo "Solution.xml exists."
          else
            echo "Solution.xml does not exist."
            exit 1
          fi

      - name: Install xmllint
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils

      - name: Extract solution name from Solution.xml
        id: get-solution-name
        run: |
          SOLUTION_NAME=$(xmllint --xpath "string(//UniqueName)" "solutions/${{ inputs.solution_name }}/Other/Solution.xml")
          echo "Solution Name: $SOLUTION_NAME"
          echo "solution_name=$SOLUTION_NAME" >> $GITHUB_OUTPUT

      - name: Generate version number
        id: generate-version
        run: |
          VERSION=$(date +%Y.%m.%d.%H%M%S)  # Use timestamp as version
          echo "Generated Version: $VERSION"
          echo "solution_version=$VERSION" >> $GITHUB_OUTPUT

  convert-to-managed:
    needs: Get-Solution-Name-and-Version
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
      - name: Checkout main branch for custom actions
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Install Power Platform CLI (PAC)
        uses: microsoft/powerplatform-actions/actions-install@v1

      - name: Pack solution
        uses: microsoft/powerplatform-actions/pack-solution@main
        with:
          solution-folder: solutions/${{ needs.Get-Solution-Name-and-Version.outputs.solution_name }}
          solution-file: out/solutions/${{ needs.Get-Solution-Name-and-Version.outputs.solution_name }}.zip
          solution-type: Unmanaged

      - name: Import solution as unmanaged to build env
        uses: microsoft/powerplatform-actions/import-solution@main
        with:
          environment-url: ${{ inputs.BUILD_ENVIRONMENT_URL }}
          app-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.envSecret }}
          tenant-id: ${{ secrets.TENANT_ID }}
          solution-file: out/solutions/${{ needs.Get-Solution-Name-and-Version.outputs.solution_name }}.zip
          force-overwrite: true
          publish-changes: true

      - name: Export solution as managed
        uses: microsoft/powerplatform-actions/export-solution@main
        with:
          environment-url: ${{ inputs.BUILD_ENVIRONMENT_URL }}
          app-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.envSecret }}
          tenant-id: ${{ secrets.TENANT_ID }}
          solution-name: ${{ needs.Get-Solution-Name-and-Version.outputs.solution_name }}
          managed: true
          solution-output-file: out/ship/${{ needs.Get-Solution-Name-and-Version.outputs.solution_name }}_${{ needs.Get-Solution-Name-and-Version.outputs.solution_version }}_managed.zip

      - name: Upload the ready-to-ship solution to GH artifact store
        uses: actions/upload-artifact@v4
        with:
          name: managedSolutions
          path: out/ship/

  release-to-production:
    needs: convert-to-managed
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Install Power Platform CLI (PAC)
        uses: microsoft/powerplatform-actions/actions-install@v1

      - name: Fetch the ready-to-ship solution from GH artifact store
        uses: actions/download-artifact@v4
        with:
          name: managedSolutions
          path: out/release/

      - name: Import solution to production environment
        uses: microsoft/powerplatform-actions/import-solution@v1
        with:
          environment-url: ${{ inputs.PRODUCTION_ENVIRONMENT_URL }}
          app-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.envSecret }}
          tenant-id: ${{ secrets.TENANT_ID }}
          solution-file: out/release/${{ needs.Get-Solution-Name-and-Version.outputs.solution_name }}_${{ needs.Get-Solution-Name-and-Version.outputs.solution_version }}_managed.zip
          force-overwrite: true
          publish-changes: true
