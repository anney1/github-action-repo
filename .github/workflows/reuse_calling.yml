name: release-solution-to-prod-reusable
on:
  workflow_call:
    inputs:
      solution_name:
        description: 'The solution name.'
        type: string
        default: gitsol
      solution_shipping_folder:
        description: 'folder name for staging the exported solution *do not change*'
        type: string
        default: out/ship/
      solution_outbound_folder:
        description: 'staging the unpacked solution folder before check-in *do not change*'
        type: string
        default: out/solutions/
      solution_source_folder:
        description: 'folder name to be created and checked in *do not change*'
        type: string
        default: solutions/
      solution_release_folder:
        description: 'folder where the released binaries are going to be hosted *do not change*'
        type: string
        default: out/release
      BUILD_ENVIRONMENT_URL:
        description: 'Build environment url.'
        type: string
        required: true
      PRODUCTION_ENVIRONMENT_URL:
        description: 'Prod Env URL'
        type: string
        required: true
      CLIENT_ID:
        description: 'The client id'
        type: string
        required: true
      TENANT_ID:
        description: 'The tenant id'
        type: string
        required: true
    secrets:
      envSecret:
        description: 'The secret value for authentication using SPN'
        required: true

jobs:
  convert-to-managed:
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    - uses: actions/checkout@v3
      with:
        ref: gitsol-20250214-1206
      # with:
      #   lfs: true

    - name: Install PAC CLI
      uses: microsoft/powerplatform-actions/actions-install@v1
      id: install-pac

    # Verify PAC CLI is installed correctly
    - name: Check PAC CLI version
      run: pac --version

    # Authenticate with Power Platform
    - name: Authenticate with Power Platform
      run: |
        pac auth create --url ${{ inputs.BUILD_ENVIRONMENT_URL }} --applicationId ${{ inputs.CLIENT_ID }} --clientSecret ${{ secrets.envSecret }} --tenant ${{ inputs.TENANT_ID }}

    # Debug repository contents to check the folder structure
    - name: Debug repository contents
      run: |
        ls -R

    # Debug solution folder structure
    - name: Debug solution folder structure
      run: |
        ls -R ${{ inputs.solution_source_folder }}/${{ inputs.solution_name }}

    # Pack solution (as the next step)
    - name: Pack solution
      run: pac solution pack --folder ${{ inputs.solution_source_folder }} --zipfile ${{ inputs.solution_outbound_folder }}/${{ inputs.solution_name }}.zip --packagetype Unmanaged
  
    - name: Pack solution
      uses: microsoft/powerplatform-actions/pack-solution@main
      with:
        solution-folder: ${{ inputs.solution_source_folder }}/${{ inputs.solution_name }}  # Use input for solution folder
        solution-file: ${{ inputs.solution_outbound_folder }}/${{ inputs.solution_name }}.zip  # Use input for solution file
        solution-type: Unmanaged

    - name: Import solution as unmanaged to build env
      uses: microsoft/powerplatform-actions/import-solution@main
      with:
        environment-url: ${{ inputs.BUILD_ENVIRONMENT_URL }}  # Use input for build environment URL
        app-id: ${{ inputs.CLIENT_ID }}  # Use input for client ID
        client-secret: ${{ secrets.envSecret }}  # Use secret for client secret
        tenant-id: ${{ inputs.TENANT_ID }}  # Use input for tenant ID
        solution-file: ${{ inputs.solution_outbound_folder }}/${{ inputs.solution_name }}.zip  # Use input for solution file
        force-overwrite: true
        publish-changes: true

    - name: Export solution as managed
      uses: microsoft/powerplatform-actions/export-solution@main
      with:
        environment-url: ${{ inputs.BUILD_ENVIRONMENT_URL }}  # Use input for build environment URL
        app-id: ${{ inputs.CLIENT_ID }}  # Use input for client ID
        client-secret: ${{ secrets.envSecret }}  # Use secret for client secret
        tenant-id: ${{ inputs.TENANT_ID }}  # Use input for tenant ID
        solution-name: ${{ inputs.solution_name }}  # Use input for solution name
        managed: true
        solution-output-file: ${{ inputs.solution_shipping_folder }}/${{ inputs.solution_name }}_managed.zip  # Use input for solution output file

    - name: Upload the ready to ship solution to GH artifact store
      uses: actions/upload-artifact@v4
      with:
        name: managedSolutions
        path: ${{ inputs.solution_shipping_folder }}  # Use input for shipping folder

  release-to-staging:
    needs: [ convert-to-managed ]
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    - uses: actions/checkout@v2
      with:
        lfs: true

    - name: Fetch the ready to ship solution from GH artifact store
      uses: actions/download-artifact@v4
      with:
        name: managedSolutions
        path: ${{ inputs.solution_release_folder }}  # Use input for release folder

    - name: Import solution to prod env
      uses: microsoft/powerplatform-actions/import-solution@v0
      with:
        environment-url: ${{ inputs.PRODUCTION_ENVIRONMENT_URL }}  # Use input for production environment URL
        app-id: ${{ inputs.CLIENT_ID }}  # Use input for client ID
        client-secret: ${{ secrets.envSecret }}  # Use secret for client secret
        tenant-id: ${{ inputs.TENANT_ID }}  # Use input for tenant ID
        solution-file: ${{ inputs.solution_release_folder }}/${{ inputs.solution_name }}_managed.zip  # Use input for solution file
        force-overwrite: true
        publish-changes: true
