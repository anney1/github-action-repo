name: approval-export-and-branch-solution

on:
  workflow_dispatch:
    inputs:
      solution_name:
        description: 'Name of the solution to work on from Power Platform'
        required: true


permissions:
  contents: write
  pull-requests: write

jobs:
  export-from-dev:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Power Platform CLI
        run: |
          Invoke-WebRequest -Uri https://aka.ms/powerplatform-vscode -OutFile powerplatform-vscode.msi
          Start-Process msiexec.exe -Wait -ArgumentList '/I powerplatform-vscode.msi /quiet /norestart'

      - name: Install PAC CLI
        uses: microsoft/powerplatform-actions/actions-install@v1

      - name: export-solution
        uses: microsoft/powerplatform-actions/export-solution@v1
        with:
          environment-url: ${{ secrets.DEV_ENV }}
          app-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.Client_SPN }}
          tenant-id: ${{ secrets.TENANT_ID }}
          solution-name: ${{ inputs.solution_name }}
          solution-output-file: out/exported/${{ inputs.solution_name }}.zip

      - name: unpack-solution
        uses: microsoft/powerplatform-actions/unpack-solution@v1
        with:
          solution-file: out/exported/${{ inputs.solution_name }}.zip
          solution-folder: out/solutions/${{ inputs.solution_name }}
          solution-type: 'Unmanaged'
          overwrite-files: true

      - name: branch-solution
        uses: microsoft/powerplatform-actions/branch-solution@v1
        with:
          solution-folder: out/solutions/${{ inputs.solution_name }}
          solution-target-folder: solutions/${{ inputs.solution_name }}
          repo-token: ${{ secrets.GH_TOKEN }}
          allow-empty-commit: true

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GH_TOKEN }}
          commit-message: "feat: Update solution ${{ inputs.solution_name }}"
          title: "Update solution ${{ inputs.solution_name }}"
          body: "This PR updates the solution ${{ inputs.solution_name }} with the latest changes."
          branch: "update-solution-${{ inputs.solution_name }}"
          base: main
          draft: false
          delete-branch: true

  wait-for-codeowner-approval:
    runs-on: ubuntu-latest
    needs: export-from-dev
    steps:
      - name: Wait for CodeOwner Approval
        id: check-approval
        uses: actions/github-script@v6
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `update-solution-${process.env.INPUT_SOLUTION_NAME}`,
            });

            const prNumber = prs[0].number;

            while (true) {
              const { data: reviews } = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
              });

              const approved = reviews.some(review => review.state === 'APPROVED');

              if (approved) {
                console.log('PR Approved');
                break;
              } else {
                console.log('Waiting for Code Owner approval...');
                await new Promise(resolve => setTimeout(resolve, 30000)); // Check every 30 seconds
              }
            }


  send-approval-notification:
    needs: export-from-dev
    runs-on: ubuntu-latest
    steps:
      - name: Notify CODEOWNER for Approval
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{\"body\": \"@CODEOWNERS Approval required for release to production.\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ env.PR_NUMBER }}/comments"

              

  merge-pr:
    runs-on: ubuntu-latest
    needs: wait-for-codeowner-approval
    steps:
      - name: Get Pull Request Number
        id: get-pr-number
        run: |
          PR_NUMBER=$(curl -s -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?head=update-solution-${{ inputs.solution_name }}" \
            | jq -r '.[0].number')
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV

      - name: Merge Pull Request
        run: |
          curl -X PUT \
            -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ env.PR_NUMBER }}/merge" \
            -d '{"merge_method": "merge"}'

      - name: Delete Branch
        if: success()  # Only run if the previous steps succeeded
        run: |
          curl -X DELETE \
            -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/git/refs/heads/update-solution-${{ inputs.solution_name }}"
