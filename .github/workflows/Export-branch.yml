name: export-and-branch-solution

on:
  workflow_dispatch:
    inputs:
      solution_name:
        description: 'Name of the solution to work on from Power Platform'
        required: true
        default: canvas
      solution_exported_folder:
        description: 'Folder name for staging the exported solution *do not change*'
        required: true
        default: out/exported/
      solution_folder:
        description: 'Staging the unpacked solution folder before check-in *do not change*'
        required: true
        default: out/solutions/
      solution_target_folder:
        description: 'Folder name to be created and checked in *do not change*'
        required: true
        default: solutions/

env:
  ENVIRONMENT_URL: secrets.DEV_ENV
  CLIENT_ID: secrets.CLIENT_ID
  TENANT_ID: secrets.TENANT_ID

permissions:
  contents: write

jobs:
  export-from-dev:
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1
    steps:
    - uses: actions/checkout@v3  # Use the latest version of checkout action
      with:
        lfs: true

    - name: Install Power Platform CLI
      run: |
        Invoke-WebRequest -Uri https://aka.ms/powerplatform-vscode -OutFile powerplatform-vscode.msi
        Start-Process msiexec.exe -Wait -ArgumentList '/I powerplatform-vscode.msi /quiet /norestart'
        $env:Path += ";C:\Program Files\WindowsPowerShell\Modules"

    - name: Install PAC CLI
      uses: microsoft/powerplatform-actions/actions-install@v1  # Install PAC CLI
      id: install-pac

    - name: who-am-i action
      uses: microsoft/powerplatform-actions/who-am-i@v1  # Use latest available version
      with:
        environment-url: ${{ secrets.DEV_ENV }}
        app-id: ${{ secrets.CLIENT_ID }}
        client-secret: ${{ secrets.CLIENT_SPN }}
        tenant-id: ${{secrets.TENANT_ID}}

    - name: export-solution action
      uses: microsoft/powerplatform-actions/export-solution@v1  # Use latest available version
      with:
        environment-url: ${{ secrets.DEV_ENV }}
        app-id: ${{ secrets.CLIENT_ID }}
        client-secret: ${{ secrets.CLIENT_SPN }}
        tenant-id: ${{secrets.TENANT_ID}}
        solution-name: gitsol
        solution-output-file: out/exported/canvas.zip

    - name: unpack-solution action
      uses: microsoft/powerplatform-actions/unpack-solution@v1  # Use latest available version
      with:
        solution-file: out/exported/canvas.zip
        solution-folder: out/solutions/canvas
        solution-type: 'Unmanaged'
        overwrite-files: true

    - name: Create branch and link to Jira issue
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git checkout -b KOM-3-canvas
        git add .
        git commit -m "Created branch KOM-1-testjira for Jira issue KOM-2"
        git push origin KOM-3-canvas

    - name: branch-solution, prepare it for a PullRequest
      uses: microsoft/powerplatform-actions/branch-solution@v1  # Use latest available version
      with:
        solution-folder: out/solutions/canvas
        solution-target-folder: solutions/KOM-3-canvas
        repo-token: ${{ secrets.GH_TOKEN }}
        allow-empty-commit: true
    
   
