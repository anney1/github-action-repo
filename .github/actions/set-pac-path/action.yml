name: 'Setup Power Platform CLI'
description: 'Set up Power Platform CLI'
inputs:
  environment-url:
    description: 'Environment URL for authentication'
    required: true
runs:
  using: 'composite'
  steps:
    - name: Install Power Platform CLI
      run: |
        Invoke-WebRequest -Uri https://aka.ms/powerplatform-vscode -OutFile powerplatform-vscode.msi
        Start-Process msiexec.exe -Wait -ArgumentList '/I powerplatform-vscode.msi /quiet /norestart'
        echo "C:\\Program Files\\Power Platform\\Tools" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8
      shell: powershell

    - name: Verify installation
      run: pac --version
      shell: powershell

# #comment
# name: set-pac-path

# description: "add pac cli to path so we can use it directly"

# runs:
#   using: "composite"
#   steps:
#     # hack, but necessary until GitHub Actions for Power Platform support all pac commands
#     - if: ${{ false }} # this will never run, but will force powerplatform-actions to download
#       name: force-pac-download
#       uses: microsoft/powerplatform-actions/unpack-solution@latest
#       with:
#         solution-file: fake.zip
#         solution-folder: fake

#     - if: ${{ always() }}
#       id: get-pac-path
#       name: get-pac-path
#       shell: pwsh
#       run: |
#         $actionsPath = "${{ runner.temp }}".Replace("_temp","_actions")
#         if ($env:RUNNER_OS -eq "Windows") {
#           $array = Get-ChildItem $actionsPath -Recurse | Where-Object{$_.FullName.EndsWith('pac\tools\pac.exe')}
#         }
#         else {
#           $array = Get-ChildItem $actionsPath -Recurse | Where-Object{$_.FullName.EndsWith('pac_linux/tools/pac')}
#         }
#         $pacPath = $array[0].Directory.FullName
#         "$pacPath" >> $env:GITHUB_PATH
